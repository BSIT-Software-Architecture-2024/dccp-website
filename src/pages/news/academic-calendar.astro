---
import Layout from "../../layouts/Layout.astro";
import Block01Navigation from "../../components/kokonutui/block-01-nav";
import Footer from "../../components/Footer.astro";
import type { Semester } from '../../data/academic-calendar';
import { format, parseISO } from 'date-fns';
import CalendarEvent from '../../components/calendar/CalendarEvent.astro';

// Import academic calendar data
const academicCalendar = {
  year: "2023-2024",
  semesters: [
    {
      name: "First Semester",
      startDate: "2023-08-01",
      endDate: "2023-12-20",
      events: [
        {
          id: "1",
          title: "Start of Classes",
          date: "2023-08-01",
          category: "academic",
          description: "First day of classes for the First Semester"
        },
        {
          id: "2",
          title: "Midterm Examinations",
          startDate: "2023-09-25",
          endDate: "2023-09-29",
          category: "exam",
          description: "Midterm examination period"
        }
      ]
    }
  ]
};

// Convert calendar events to news items format
const calendarNewsItems = academicCalendar.semesters.flatMap(semester => 
  semester.events.map(event => ({
    id: event.id,
    title: event.title,
    date: event.startDate || event.date,
    content: event.description,
    link: `/news/academic-calendar#${event.id}`,
    type: 'announcement',
    image: `/images/events/${event.category}.jpg`,
    excerpt: event.description,
    featured: false,
    category: event.category.charAt(0).toUpperCase() + event.category.slice(1),
    markdown: event.description
  }))
);

const categoryColors = {
  'academic': 'bg-blue-100 text-blue-600',
  'holiday': 'bg-green-100 text-green-600',
  'exam': 'bg-red-100 text-red-600',
  'event': 'bg-purple-100 text-purple-600',
  'enrollment': 'bg-yellow-100 text-yellow-600'
} as const;

type CategoryType = keyof typeof categoryColors;

// Helper function to safely get category color
const getCategoryColor = (category: string): string => {
  const normalizedCategory = category.toLowerCase() as CategoryType;
  return categoryColors[normalizedCategory] || categoryColors['academic']; // fallback to academic if category not found
};

// Helper function to safely format date
const formatDate = (date: string | undefined): string => {
  if (!date) return 'Date TBA';
  return new Date(date).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

---

<Layout title="Academic Calendar - DCCP Baguio">
  <Block01Navigation client:only="react" />
  <main class="min-h-screen bg-gradient-to-b from-white to-gray-50">
    <!-- Hero Section -->
    <section class="relative overflow-hidden bg-blue-600 text-white py-16">
      <div class="absolute inset-0 bg-[url('/images/pattern.png')] opacity-10"></div>
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
        <div class="text-center">
          <h1 class="text-4xl font-bold mb-4">Academic Calendar</h1>
          <p class="text-xl text-blue-100">Academic Year {academicCalendar.year}</p>
        </div>
      </div>
    </section>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
      <!-- Category Filters -->
      <div class="mb-8">
        <div class="flex flex-wrap gap-2">
          <button
            class="px-4 py-2 rounded-full text-sm font-medium transition-colors duration-200
                   hover:bg-blue-100 hover:text-blue-800
                   focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2
                   data-[active=true]:bg-blue-600 data-[active=true]:text-white
                   data-[active=false]:bg-gray-100 data-[active=false]:text-gray-800"
            data-active="true"
            data-category="all"
          >
            All Events
          </button>
          {['academic', 'exam', 'event', 'enrollment', 'holiday'].map(category => (
            <button
              class="px-4 py-2 rounded-full text-sm font-medium transition-colors duration-200
                     hover:bg-blue-100 hover:text-blue-800
                     focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2
                     data-[active=false]:bg-gray-100 data-[active=false]:text-gray-800"
              data-active="false"
              data-category={category}
            >
              {category.charAt(0).toUpperCase() + category.slice(1)}
            </button>
          ))}
        </div>
      </div>

      <!-- Legend -->
      <div class="mb-8 p-4 bg-white rounded-lg shadow-sm">
        <h3 class="text-lg font-semibold mb-3">Event Categories</h3>
        <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
          {Object.entries(categoryColors).map(([category, colors]) => (
            <div class="flex items-center gap-2">
              <div class={`w-4 h-4 rounded ${colors.split(' ')[0]} border ${colors.split(' ')[2]}`}></div>
              <span class="text-sm">{category.charAt(0).toUpperCase() + category.slice(1)}</span>
            </div>
          ))}
        </div>
      </div>

      <!-- Calendar Events -->
      <div class="grid gap-8 md:grid-cols-3">
        {calendarNewsItems.map(item => (
          <div 
            class="group bg-white rounded-lg shadow-lg border border-gray-100 hover:shadow-xl transition-all duration-300 event-card"
            data-category={item.category.toLowerCase()}
          >
            <div class="aspect-video w-full overflow-hidden rounded-t-lg">
              <img 
                src={item.image} 
                alt={item.title}
                class="w-full h-full object-cover transform group-hover:scale-105 transition-transform duration-300"
              />
            </div>
            <div class="p-6">
              <div class="flex items-center gap-4 mb-3">
                <span class={`px-3 py-1 text-sm font-medium rounded-full ${getCategoryColor(item.category)}`}>
                  {item.category}
                </span>
                <time class="text-sm text-gray-500">{formatDate(item.date)}</time>
              </div>
              <h3 class="text-lg font-bold text-gray-800 mb-2 group-hover:text-blue-600 transition-colors">
                {item.title}
              </h3>
              <p class="text-gray-600 text-sm">{item.excerpt}</p>
            </div>
          </div>
        ))}
      </div>

      <!-- Download Section -->
      <div class="mt-16 text-center">
        <h3 class="text-2xl font-bold mb-4">Need a copy of the calendar?</h3>
        <p class="text-gray-600 mb-6">Download the academic calendar for offline reference</p>
        <div class="flex justify-center gap-4">
          <a
            href="#"
            class="inline-flex items-center px-6 py-3 rounded-lg bg-blue-600 text-white hover:bg-blue-700 transition-colors duration-200"
          >
            <i class="fi fi-rr-download mr-2"></i>
            Download PDF
          </a>
          <a
            href="#"
            class="inline-flex items-center px-6 py-3 rounded-lg bg-gray-100 text-gray-800 hover:bg-gray-200 transition-colors duration-200"
          >
            <i class="fi fi-rr-calendar mr-2"></i>
            Add to Calendar
          </a>
        </div>
      </div>
    </div>
  </main>
  <Footer />

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const filterButtons = document.querySelectorAll('[data-category]');
      const eventCards = document.querySelectorAll('.event-card') as NodeListOf<HTMLElement>;

      filterButtons.forEach(button => {
        button.addEventListener('click', () => {
          // Update active state of buttons
          filterButtons.forEach(btn => {
            btn.setAttribute('data-active', 'false');
            btn.classList.remove('bg-blue-600', 'text-white');
            btn.classList.add('bg-gray-100', 'text-gray-800');
          });
          
          button.setAttribute('data-active', 'true');
          button.classList.remove('bg-gray-100', 'text-gray-800');
          button.classList.add('bg-blue-600', 'text-white');

          // Filter events
          const selectedCategory = button.getAttribute('data-category');
          eventCards.forEach(card => {
            const cardCategory = card.getAttribute('data-category');
            if (selectedCategory === 'all' || cardCategory === selectedCategory) {
              card.style.display = 'block';
            } else {
              card.style.display = 'none';
            }
          });
        });
      });
    });
  </script>
</Layout>
